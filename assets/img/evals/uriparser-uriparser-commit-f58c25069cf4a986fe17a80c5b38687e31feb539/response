//c file
/*
 * uriparser - RFC 3986 URI parsing library
 *
 * Copyright (C) 2007, Weijia Song <songweijia@gmail.com>
 * Copyright (C) 2007, Sebastian Pipping <sebastian@pipping.org>
 * All rights reserved.
 *
 * Redistribution  and use in source and binary forms, with or without
 * modification,  are permitted provided that the following conditions
 * are met:
 *
 *     * Redistributions   of  source  code  must  retain  the   above
 *       copyright  notice, this list of conditions and the  following
 *       disclaimer.
 *
 *     * Redistributions  in  binary  form must  reproduce  the  above
 *       copyright  notice, this list of conditions and the  following
 *       disclaimer   in  the  documentation  and/or  other  materials
 *       provided with the distribution.
 *
 *     * Neither  the name of the <ORGANIZATION> nor the names of  its
 *       contributors  may  be  used to endorse  or  promote  products
 *       derived  from  this software without specific  prior  written
 *       permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT  NOT
 * LIMITED  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS
 * FOR  A  PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT  SHALL  THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL,    SPECIAL,   EXEMPLARY,   OR   CONSEQUENTIAL   DAMAGES
 * (INCLUDING,  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES;  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT  LIABILITY,  OR  TORT (INCLUDING  NEGLIGENCE  OR  OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* What encodings are enabled? */
#include <uriparser/UriDefsConfig.h>
#if (!defined(URI_PASS_ANSI) && !defined(URI_PASS_UNICODE))
/* Include SELF twice */
# ifdef URI_ENABLE_ANSI
#  define URI_PASS_ANSI 1
#  include "UriCommon.c"
#  undef URI_PASS_ANSI
# endif
# ifdef URI_ENABLE_UNICODE
#  define URI_PASS_UNICODE 1
#  include "UriCommon.c"
#  undef URI_PASS_UNICODE
# endif
#else
# ifdef URI_PASS_ANSI
#  include <uriparser/UriDefsAnsi.h>
# else
#  include <uriparser/UriDefsUnicode.h>
#  include <wchar.h>
# endif



#ifndef URI_DOXYGEN
# include <uriparser/Uri.h>
# include "UriCommon.h"
#endif



/*extern*/ const URI_CHAR * const URI_FUNC(SafeToPointTo) = _UT("X");
/*extern*/ const URI_CHAR * const URI_FUNC(ConstPwd) = _UT(".");
/*extern*/ const URI_CHAR * const URI_FUNC(ConstParent) = _UT("..");



void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {
	//response
	uri->scheme.first = uri->scheme.afterLast = 0;
	uri->userInfo.first = uri->userInfo.afterLast = 0;
	uri->hostText.first = uri->hostText.afterLast = 0;
	uri->portText.first = uri->portText.afterLast = 0;
	uri->pathHead.first = uri->pathHead.afterLast = 0;
	uri->query.first = uri->query.afterLast = 0;
	uri->fragment.first = uri->fragment.afterLast = 0;
	uri->pathTail.first = uri->pathTail.afterLast = 0;
	uri->path.first = uri->path.afterLast = 0;
	uri->queryList.first = uri->queryList.afterLast = 0;
	uri->fragmentList.first = uri->fragmentList.afterLast = 0;
	uri->authority.first = uri->authority.afterLast = 0;
	uri->host.first = uri->host.afterLast = 0;
	uri->user.first = uri->user.afterLast = 0;
	uri->password.first = uri->password.afterLast = 0;
	uri->port = 0;
	uri->isGeneric = 0;
	uri->isHierarchical = 0;
	uri->isOpaque = 0;
	uri->isAbsolute = 0;
	uri->isRelative = 0;
	uri->isRelativeRef = 0;
	uri->isServerAuthority = 0;
	uri->isFile = 0;
	uri->isMailto = 0;
	uri->isTel = 0;
	uri->isNews = 0;
	uri->isUuid = 0;
	uri->isSip = 0;
	uri->isSips = 0;
	uri->isTelnet = 0;
	uri->isFtp = 0;
	uri->isFileUri = 0;
	uri->isFileUriEx = 0;
	uri->isFileUriEx2
  
